#!/usr/bin/python3
# _*_coding:utf-8 _*_

"""
Author: qinchangshuai(cs_qin@qq.com) 
Date: 2021/4/29 13:51 
"""

import pdfplumber
import json
import xlsxwriter
import pandas as pd


# 判断当前复试结果的考生编号是否被拟录取，输出加一列状态 1录取 2未录取
def process_admission_file_to_get_retest_status(admission_file_path, retest_score_path, output_file_path, department_name):
    # 建立输出表格
    work_book = xlsxwriter.Workbook(output_file_path)
    work_sheet = work_book.add_worksheet()
    work_sheet.write(0, 0, "初试成绩")
    work_sheet.write(0, 1, "复试成绩")
    work_sheet.write(0, 2, "总成绩")
    work_sheet.write(0, 3, "状态")
    tables = []
    rank = 1
    student_sno_list = []

    # 读取拟录取名单pdf提取拟录取考生编号
    # pdf = pdfplumber.open(admission_file_path)
    # for page in pdf.pages:
    #     # print(page)
    #     table = page.extract_tables()
    #     tables.append(table)
    #     # print(table)
    #     for row in table[0][1:]:
    #         if row[2].replace("\n", "") == department_name:
    #             print(row[1], row[2])
    #             student_sno_list.append(row[0])
    # print(student_sno_list)
    student_sno_list = ['104231375205362', '104231371413178', '104231370609601', '104231370811069', '104231375205366', '104231370107274', '104231370107273', '104231375205363', '104231375203449', '104231375203451', '104231375203453', '100561025424642', '104231375202511', '104231375203446', '104231375203447', '104231130214225', '104231375203459', '104231152615556', '104231220416037', '104221510107704', '100561057330411', '104231370609602', '104231371011793', '104221510915258', '104231375205370', '102841212219840', '100271218160164', '101831213207765', '104231140214912', '104231371513243', '104231371513244', '104231140214915', '104231375202601', '104231230316236', '104231360318258', '104231210415716', '104231460320044', '104231131414656', '104231321717031', '104231370710056', '104231231716480', '104231375202597', '104231370106073', '104231375202576', '104231375202573', '104231370710048', '104231370106057', '104231342217765', '104231375202557', '104231375202564', '104231370710050', '104231370106055', '104231370810718', '104231375202568', '104231375202559', '104231375203063', '104231375203051', '104231375203061', '104231375203062', '104231375203049', '104231375203057', '104231346317917', '104231124614180', '104231411518742', '104231370106235', '104231346417936', '104231131414663', '104231370609023', '104231375203050', '104231370911283', '104231375203054', '104231420319291', '104231370106239', '104231370710125', '104231375203070', '104231375203068', '104231371413040', '104231375203071', '104231375204052', '104231375204066', '104231375204049', '104231375204060', '104231375204025', '104231370307666', '104231375204076', '104231375204024', '104231375204072', '104231375204026', '104231375204056', '104231230316263', '104231371112149', '104231375204028', '104231330117333', '104231375204069', '104231370106695', '104231420319296', '104231501120199', '104231220716187', '104231370710256', '104231370106703', '104231375204055', '104231371713866', '104231370911421', '104231371112147', '104231375204073', '104231370106704', '104231371413094', '104231371513340', '104231232216532', '104231375202614', '104231321116801', '102901211604314', '104231375202616', '104231375202617', '104231375202619', '102481122116056', '102471630120677', '104231123314090', '104231370608909', '106991611210759', '104231211715845', '106101080310035', '104231375202608', '104231371513246', '102471000000595', '104231370911207', '102861141106581', '104231375202620', '100061210504382', '104231375202609', '104231413919057', '102481122123154', '104231375202607', '100011000120055', '104231130914542', '102841213320673', '104231375202610', '100071000009921', '100061210505213', '105321370201101', '101411212005396', '106991321516671', '104231375202974', '104231375202977', '104231375202978', '106991340116887', '104231342517817', '104231375202975', '103351000921269', '104231375202981', '104231370911273', '104231375202980', '104231423819563', '104231375204090', '104231375204092', '104231375204093', '104231375204082', '104231371011803', '104231370710259', '104231370810870', '104231142315397', '104231375204086', '104231370810873', '104231371513344', '104231375204089', '104231375203131', '104231411618770', '104231360118204', '104231370911295', '104231347818001', '104231371713784', '104231371112081', '104231370810773', '104231375203146', '104231375203098', '104231141115124', '104231370106266', '104231231716483', '104231370106245', '104231131514702', '104231370710135', '104231361318339', '104231361318338', '104231371413047', '104231345717840', '104231411618771', '104231375203088', '104231375203153', '104231375203086', '104231370710138', '104231370710129', '104231141315205', '104231375203147', '104231375203119', '104231375203079', '104231345717841', '104231371312618', '104231371312619', '104231375203129', '104231371713783', '104231371112083', '104231375203152', '104231375203109', '104231375203084', '104231420319292', '104231370609030', '104231370609040', '104231370810768', '104231371513282', '104231370710134', '104231413919058', '104231375203103', '104231375203113', '104231375203096', '104231375203136', '104231375203149', '104231231016401', '104231375203105', '104231375203148', '104231371613560', '104231375203118', '104231214515971', '104231430819655', '104231370106248', '104231370911293', '104231370911287', '104231375203133', '104231371413049', '104231220716184', '104231375203908', '104231370307663', '104231375203955', '104231321116844', '104231370911406', '104231370810854', '104231370106677', '104231150415505', '104231371312715', '104231375203934', '104231371613586', '104231370106660', '104231375203993', '104231232516573', '104231375203968', '104231371312709', '104231375203989', '104231330117330', '104231375203951', '104231375203897', '104231321717059', '104231375203954', '104231370106647', '104231375203971', '104231370609196', '104231375203879', '104231375203931', '104231370810838', '104231375203896', '104231375203969', '104231322217230', '104231375203910', '104231232516571', '104231375203876', '104231370307658', '104231370106666', '104231370508366', '104231370106651', '104231370609192', '104231413218946', '104231375203960', '104231321116843', '104231422419474', '104231370106679', '104231375203933', '104231375203975', '104231370106645', '104231370508370', '104231370710242', '104231370609189', '104231375203978', '104231375203886', '104231375203986', '104231210815755', '104231230316261', '104231375203869', '104231370106659', '104231141515254', '104231411918827', '104231375203984', '104231375203932', '104231375203963', '104231371312716', '104231375203943', '104231370508369', '104231340217573', '104231141015101', '104231370407960', '104231375203027', '104231375203018', '104231450119922', '104231370106222', '104231420519313', '104231375202992', '104231375203029', '104231370106218', '104231410318462', '104231375203019', '104231213915887', '104231140414945', '104231370810752', '104231370911275', '104231370810751', '104231375203040', '104231371613556', '104231348718022', '104231375203030', '104231610520707', '104231322117174', '104231375203035', '104231375203015', '104231130614443', '104231370911276', '104231371713777', '104231370106234', '104231370106215', '104231322117175', '104231370106232', '104231370307497', '104231370710053', '104231370106065', '104231370106068', '104231232316551', '104231430519618', '104231142315384', '104231131514690', '104231422519483', '104231630321055', '104231141515232', '104231370307505', '104231370307506', '104231423819561', '104231370608900', '104231375202587', '104231415519250', '104231370608899', '104231371312582', '104231370106071', '104231370608898', '104231342217766', '104231370307503', '104231342917828', '104231220716138', '104231415519252', '104231375202579', '104231415519251', '104231210215674', '104231375202588', '104231370307496', '104231370608902', '104231370307495', '104231322017112', '104231371413016', '104231370307501', '104231375202622', '102171000050037', '104231370810722', '104231370307510', '104231211215800', '101451000013807', '106141085410347', '104231131014588', '100071000010549', '102871210412766', '104231371513247', '103591210006681', '101451000011912', '104231370407909', '104231422819504', '104231153115575', '101451000001151', '104231142515446', '104231371312583', '101451000014842', '104231370710060', '104231321216898', '100071000011319', '104231370106078', '101451000015263', '101451000000736', '104231375202625', '104231411518736', '104231130214209', '103581210003056', '104231370710059', '104231460520094', '104231371413020', '104231370810878', '106981441119527', '104231370106712', '100061210503264', '104231370106713', '104871000138977', '105331430412192', '106981210113059', '104221510108736', '101831215314289', '100561025424632', '105331431511739', '103581210010927', '103841213214244', '144301143000067', '101831215316310', '104231413719033', '100561000101146', '101831215303127', '103861100303398', '102481122123180', '102461131712083', '104231211215805', '104231370810880', '101451000002154', '104231330217386', '104231514820516', '104231370710266', '104231371713871', '102461123211999', '104231371613591', '106101085410202', '101831215316843', '104221510918851', '106141085400770', '104231371413090', '102871210404099', '101831215302412', '104231370106223', '103351000926699', '104231370106720', '104221510914654', '104231375204103', '104221510919588', '104231370106690', '100041370209831', '104221510919231', '104231371312727', '104231375204107', '104231370710257', '100031023101473', '104231371713870', '104231370609217', '102851212619961', '104251540003782', '104231340817690', '104231375204120', '104231375204051', '104231370307674', '104231370106724', '101411321708234', '106101085410225', '101511000401159', '104221510109301', '104221510919332', '106101085412153', '104231375204111', '105611200015000', '104231371513347', '104231370710237', '104231375203116', '102861370215534', '104231370407967', '104231370307646', '106981411417424', '104231370710267', '104231375204118', '104231375204108', '106981342215240', '104871000135404', '104231375204099', '104231650421168', '102861130306101', '101411370209726', '104231375204117', '106101085411114', '104231321717062', '104231370609197', '104231321116846', '104231370106715', '104251540003016', '104911320317454', '103001210302609', '106101085411625', '104221510915442', '102861320203451', '106981370216293', '106111008080013', '118451004003778', '102881500005427', '104231370609220', '104231371312726', '104221510919340', '104221510914669', '106101085410291', '104871000107603', '104231451119999', '104221510919413', '102861360815041', '104231531120667', '100061210506631', '104231370307671', '104231375204037', '104221510918842', '102881500012952', '103351000911034', '102131000001277', '100071000013910', '104231370710245', '104221510919382', '104231370710265', '104231410718572', '102861320203049', '106101085410500', '101831215302319', '104251540003059', '104231350118054', '104231375204102', '104221510109386', '104231371312728', '106981411917684', '104231375204104', '100561025424638', '101411370109288', '101411370209723', '104231370609219', '104871000134501', '103351000900844', '104231124314158', '102861361115104', '104231370710258', '144231208100625', '104871000143368', '104221510108744', '104221510919156', '104231375204096', '100011000470924', '104231650621195', '104231375202604', '104231430819651', '104231142315385', '104231370608907', '104231375202605', '104231124614177', '104231321116798', '104231375202603', '104231515720545', '104231421119391', '104231413318976', '104231360918304', '104231321917095', '104231321617004', '104231140815063', '104231370911462', '104231370106850', '104231220716196', '104231371413124', '104231410218435', '104231371112204', '104231375204554', '104231375204560']
    # 读取带成绩和学号的复试成绩公示 ---- 考生编号/初试成绩/复试成绩/总成绩
    sheet = pd.read_excel(retest_score_path, "Sheet1")
    sheet_content = sheet.values.tolist()
    for i in range(len(sheet_content)):
        try:
            work_sheet.write(rank, 0, float(sheet_content[i][1]))
            work_sheet.write(rank, 1, float(sheet_content[i][2]))
            work_sheet.write(rank, 2, float(sheet_content[i][3]))
        except Exception as e:
            print("第%s行数字有误[%s, %s, %s] | %s" % (i + 1, sheet_content[i][1], sheet_content[i][2], sheet_content[i][3], e))
        # 未录取
        if str(int(sheet_content[i][0])).strip() not in student_sno_list:
            print(int(sheet_content[i][0]))
            work_sheet.write(rank, 3, 2)
        # 录取
        else:
            work_sheet.write(rank, 3, 1)
        rank += 1
    work_book.close()


if __name__ == '__main__':
    process_admission_file_to_get_retest_status('./2021niluqu.pdf', './input/复试成绩-计算机科学与技术.xls', './output/2021-8.xls', '信息科学与工程学院')